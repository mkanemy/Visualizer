{"ast":null,"code":"export default function dijkstraAlgorithm(arr, start, end) {\n  // while (start[0]+1 < arr.length && start[0]-1 > 0 && start[1]+1 < arr[1].length && start[1]-1 > 0) {\n  // }\n  // console.log(arr[start[0]][start[1]]);\n  // if (arr[start[0]][start[1]][0] == 'E') {\n  //     return;\n  // }\n  // arr[start[0]+1][start[1]][1].style.backgroundColor = 'red'; // down\n  // arr[start[0]-1][start[1]][1].style.backgroundColor = 'yellow'; // up\n  // arr[start[0]][start[1]+1][1].style.backgroundColor = 'orange'; // right\n  // arr[start[0]][start[1]-1][1].style.backgroundColor = 'purple'; // left\n  // start[1]++;\n  // dijkstraAlgorithm(arr, start, end);\n  var size = arr.length * arr[0].length;\n  var current = start;\n  var currentDis = 0;\n  var newDis = 0;\n\n  for (var i = 0; i < size; i--) {\n    if (arr[current[0]][current[1]][0] == 'E') {\n      return;\n    }\n\n    if (currentDis != 0) {\n      currentDis = arr[current[0]][current[1]][0];\n    }\n\n    arr[current[0]][current[1]][0] = 'V';\n\n    if (arr[current[0] + 1][current[1]][0] != 'V') {\n      arr[start[0] + 1][start[1]][1].style.backgroundColor = 'blue';\n      newDis = currentDis + 1;\n\n      if (newDis < arr[current[0] + 1][current[1]][0]) {\n        arr[current[0] + 1][current[1]][0] = newDis; // SET PARENT????\n      }\n    }\n\n    if (arr[current[0] - 1][current[1]][0] != 'V') {\n      arr[start[0] - 1][start[1]][1].style.backgroundColor = 'blue';\n      newDis = currentDis + 1;\n\n      if (newDis < arr[current[0] - 1][current[1]][0]) {\n        arr[current[0] - 1][current[1]][0] = newDis; // SET PARENT????\n      }\n    }\n\n    if (arr[current[0]][current[1] + 1][0] != 'V') {\n      arr[start[0]][start[1] + 1][1].style.backgroundColor = 'blue';\n      newDis = currentDis + 1;\n\n      if (newDis < arr[current[0]][current[1] + 1][0]) {\n        arr[current[0]][current[1] + 1][0] = newDis; // SET PARENT????\n      }\n    }\n\n    if (arr[current[0]][current[1] - 1][0] != 'V') {\n      arr[start[0]][start[1] - 1][1].style.backgroundColor = 'blue';\n      newDis = currentDis + 1;\n\n      if (newDis < arr[current[0]][current[1] - 1][0]) {\n        arr[current[0]][current[1] - 1][0] = newDis; // SET PARENT????\n      }\n    }\n  }\n}","map":{"version":3,"names":["dijkstraAlgorithm","arr","start","end","size","length","current","currentDis","newDis","i","style","backgroundColor"],"sources":["/Users/Matt/Visualizer/app/src/Algorithms/PathFinding/dijkstra.js"],"sourcesContent":["export default function dijkstraAlgorithm(arr, start, end) {\n    // while (start[0]+1 < arr.length && start[0]-1 > 0 && start[1]+1 < arr[1].length && start[1]-1 > 0) {\n\n    // }\n    // console.log(arr[start[0]][start[1]]);\n    // if (arr[start[0]][start[1]][0] == 'E') {\n    //     return;\n    // }\n    // arr[start[0]+1][start[1]][1].style.backgroundColor = 'red'; // down\n    // arr[start[0]-1][start[1]][1].style.backgroundColor = 'yellow'; // up\n    // arr[start[0]][start[1]+1][1].style.backgroundColor = 'orange'; // right\n    // arr[start[0]][start[1]-1][1].style.backgroundColor = 'purple'; // left\n    // start[1]++;\n    // dijkstraAlgorithm(arr, start, end);\n\n    var size = arr.length * arr[0].length;\n    var current = start;\n    var currentDis = 0;\n    var newDis = 0;\n\n    for (var i = 0; i < size; i--) {\n        if (arr[current[0]][current[1]][0] == 'E') {\n            return;\n        }\n        if (currentDis != 0) {\n            currentDis = arr[current[0]][current[1]][0];\n        }\n        arr[current[0]][current[1]][0] = 'V';\n\n        if (arr[current[0]+1][current[1]][0] != 'V') {\n            arr[start[0]+1][start[1]][1].style.backgroundColor = 'blue';\n            newDis = currentDis + 1;\n            if (newDis < arr[current[0]+1][current[1]][0]) {\n                arr[current[0]+1][current[1]][0] = newDis;\n                // SET PARENT????\n            }\n        }\n        if (arr[current[0]-1][current[1]][0] != 'V') {\n            arr[start[0]-1][start[1]][1].style.backgroundColor = 'blue';\n            newDis = currentDis + 1;\n            if (newDis < arr[current[0]-1][current[1]][0]) {\n                arr[current[0]-1][current[1]][0] = newDis;\n                // SET PARENT????\n            }\n        }\n        if (arr[current[0]][current[1]+1][0] != 'V') {\n            arr[start[0]][start[1]+1][1].style.backgroundColor = 'blue';\n            newDis = currentDis + 1;\n            if (newDis < arr[current[0]][current[1]+1][0]) {\n                arr[current[0]][current[1]+1][0] = newDis;\n                // SET PARENT????\n            }\n        }\n        if (arr[current[0]][current[1]-1][0] != 'V') {\n            arr[start[0]][start[1]-1][1].style.backgroundColor = 'blue';\n            newDis = currentDis + 1;\n            if (newDis < arr[current[0]][current[1]-1][0]) {\n                arr[current[0]][current[1]-1][0] = newDis;\n                // SET PARENT????\n            }\n        }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}