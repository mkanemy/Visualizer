{"ast":null,"code":"var Node = function Node(x, y, parent) {\n  this.x = x;\n  this.y = y;\n  this.parent = parent;\n};\n\nexport default function dijkstraAlgorithm() {\n  var arr = [[]];\n  var start, end;\n  var rows = document.getElementsByClassName(\"hr\");\n\n  for (var i = 0; i < rows.length; i++) {\n    var box = rows[i].getElementsByClassName(\"box\");\n    var arr2 = [];\n\n    for (var j = 0; j < box.length; j++) {\n      if (box[j].style.backgroundColor == 'green') {\n        arr2.push([-1, box[j]]);\n        var start = [i + 1, j];\n      } else if (box[j].style.backgroundColor == 'black') {\n        arr2.push([-2, box[j]]);\n        var end = [i + 1, j];\n      } else if (box[j].style.backgroundColor == 'blue') {\n        arr2.push([-3, box[j]]);\n      } else {\n        arr2.push([Number.MAX_SAFE_INTEGER, box[j]]);\n      }\n    }\n\n    arr.push(arr2);\n  }\n\n  dijkstras(arr, start, end);\n}\n\nfunction dijkstras(arr, start, end) {\n  var size = arr.length * arr[1].length;\n  var current = start;\n  var currentDis = 0;\n  var newDis = 0;\n  var val = [];\n\n  for (var i = size; i > 0; i--) {\n    if (arr[current[0]][current[1]][0] == -2) {\n      return;\n    }\n\n    if (currentDis != 0) {\n      currentDis = arr[current[0]][current[1]][0];\n    }\n\n    if (current[0] < 0 || current[0] > arr.length || current[1] < 0 || current[1] > arr[1].length) {\n      return;\n    }\n\n    arr[current[0]][current[1]][0] = -5; // if (arr[current[0]+1][current[1]][0] != -5) {\n    //     arr[start[0]+1][start[1]][1].style.backgroundColor = 'blue';\n    //     newDis = currentDis + 1;\n    //     if (newDis < arr[current[0]+1][current[1]][0]) {\n    //         arr[current[0]+1][current[1]][0] = newDis;\n    //         // SET PARENT????\n    //         current = arr[current[0]+1][current[1]][0];\n    //     }\n    // }\n    // if (arr[current[0]-1][current[1]][0] != -5) {\n    //     arr[start[0]-1][start[1]][1].style.backgroundColor = 'blue';\n    //     newDis = currentDis + 1;\n    //     if (newDis < arr[current[0]-1][current[1]][0]) {\n    //         arr[current[0]-1][current[1]][0] = newDis;\n    //         // SET PARENT????\n    //     }\n    // }\n\n    val = arr[current[0]][current[1] + 1];\n\n    if (val[0] != -5) {\n      val[1].style.backgroundColor = 'orange';\n      newDis = currentDis + 1;\n      console.log(newDis);\n\n      if (newDis < val[0]) {\n        val[0] = newDis; // SET PARENT????\n\n        current = [current[0], current[1] + 1];\n      }\n    } // if (arr[current[0]][current[1]-1][0] != -5) {\n    //     arr[start[0]][start[1]-1][1].style.backgroundColor = 'blue';\n    //     newDis = currentDis + 1;\n    //     if (newDis < arr[current[0]][current[1]-1][0]) {\n    //         arr[current[0]][current[1]-1][0] = newDis;\n    //         // SET PARENT????\n    //     }\n    // }\n\n  }\n}","map":{"version":3,"names":["Node","x","y","parent","dijkstraAlgorithm","arr","start","end","rows","document","getElementsByClassName","i","length","box","arr2","j","style","backgroundColor","push","Number","MAX_SAFE_INTEGER","dijkstras","size","current","currentDis","newDis","val","console","log"],"sources":["/Users/Matt/Visualizer/app/src/Algorithms/PathFinding/dijkstra.js"],"sourcesContent":["var Node = function(x, y, parent){\n    this.x = x; \n    this.y = y; \n    this.parent = parent; \n}\n\n\nexport default function dijkstraAlgorithm() {\n    var arr = [[]];\n        var start, end;\n        var rows = document.getElementsByClassName(\"hr\");\n        for (var i = 0; i < rows.length; i++) {\n            var box = rows[i].getElementsByClassName(\"box\");\n            var arr2 = [];\n            for (var j = 0; j < box.length; j++) {\n                if (box[j].style.backgroundColor == 'green') {\n                    arr2.push([-1, box[j]]);\n                    var start = [i+1, j];\n                } else if (box[j].style.backgroundColor == 'black') {\n                    arr2.push([-2, box[j]]);\n                    var end = [i+1, j];\n                } else if (box[j].style.backgroundColor == 'blue') {\n                    arr2.push([-3, box[j]]);\n                } else {\n                    arr2.push([Number.MAX_SAFE_INTEGER, box[j]]);\n                }\n            }\n            arr.push(arr2);\n        }\n        dijkstras(arr, start, end);\n}\n\nfunction dijkstras(arr, start, end) {\n    var size = arr.length * arr[1].length;\n    var current = start;\n    var currentDis = 0;\n    var newDis = 0;\n    var val = [];\n\n    for (var i = size; i > 0; i--) {\n        if (arr[current[0]][current[1]][0] == -2) {\n            return;\n        }\n        if (currentDis != 0) {\n            currentDis = arr[current[0]][current[1]][0];\n        }\n\n        if (current[0] < 0 || current[0] > arr.length || current[1] < 0 || current[1] > arr[1].length) {\n            return;\n        }\n\n        arr[current[0]][current[1]][0] = -5;\n\n        // if (arr[current[0]+1][current[1]][0] != -5) {\n        //     arr[start[0]+1][start[1]][1].style.backgroundColor = 'blue';\n        //     newDis = currentDis + 1;\n        //     if (newDis < arr[current[0]+1][current[1]][0]) {\n        //         arr[current[0]+1][current[1]][0] = newDis;\n        //         // SET PARENT????\n        //         current = arr[current[0]+1][current[1]][0];\n        //     }\n        // }\n        // if (arr[current[0]-1][current[1]][0] != -5) {\n        //     arr[start[0]-1][start[1]][1].style.backgroundColor = 'blue';\n        //     newDis = currentDis + 1;\n        //     if (newDis < arr[current[0]-1][current[1]][0]) {\n        //         arr[current[0]-1][current[1]][0] = newDis;\n        //         // SET PARENT????\n        //     }\n        // }\n        val = arr[current[0]][current[1]+1];\n        if (val[0] != -5) {\n            val[1].style.backgroundColor = 'orange';\n            newDis = currentDis + 1;\n            console.log(newDis);\n            if (newDis < val[0]) {\n                val[0] = newDis;\n                // SET PARENT????\n                current = [current[0], current[1]+1];\n            }\n        }\n        // if (arr[current[0]][current[1]-1][0] != -5) {\n        //     arr[start[0]][start[1]-1][1].style.backgroundColor = 'blue';\n        //     newDis = currentDis + 1;\n        //     if (newDis < arr[current[0]][current[1]-1][0]) {\n        //         arr[current[0]][current[1]-1][0] = newDis;\n        //         // SET PARENT????\n        //     }\n        // }\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}