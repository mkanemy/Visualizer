{"ast":null,"code":"import _classCallCheck from \"/Users/Matt/Visualizer/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Matt/Visualizer/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var Node = /*#__PURE__*/function () {\n  function Node(x, y, char, dis, parent, el) {\n    _classCallCheck(this, Node);\n\n    this.dis = dis;\n    this.car = char;\n    this.x = x;\n    this.y = y;\n    this.parent = parent;\n    this.el = el;\n  }\n\n  _createClass(Node, [{\n    key: \"style\",\n    value: function style(color) {\n      this.el.style.backgroundColor = color;\n    }\n  }, {\n    key: \"coords\",\n    get: function get() {\n      return [this.x, this.y];\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.el.style.backgroundColor;\n    }\n  }]);\n\n  return Node;\n}(); // Construct array\n\nexport default function dijkstraAlgorithm() {\n  var arr = [[Node]];\n  var start, end;\n  var rows = document.getElementsByClassName(\"hr\");\n\n  for (var i = 0; i < rows.length; i++) {\n    var box = rows[i].getElementsByClassName(\"box\");\n    var arr2 = [];\n\n    for (var j = 0; j < box.length; j++) {\n      var node = new Node(i + 1, j, '0', Number.MAX_SAFE_INTEGER, null, box[j]);\n\n      if (node.color == 'green') {\n        node.char = 'S';\n        start = [i + 1, j];\n      } else if (node.color == 'black') {\n        node.char = 'E';\n        end = [i + 1, j];\n      } else if (node.color == 'blue') {\n        node.char = 'X';\n        node.dis = -3;\n      }\n\n      arr2.push(node);\n    }\n\n    arr.push(arr2);\n  }\n\n  dijkstras(arr, start, end);\n}\n\nfunction checkDis(neighbour, current) {\n  if (current.dis + 1 < neighbour.dis) {\n    neighbour.dis = current.dis + 1;\n  }\n}\n\nfunction dijkstras(arr, start, end) {\n  // var size = arr.length * arr[1].length;\n  // var current = start;\n  // var currentDis = 0;\n  // var newDis = 0;\n  // var val = [];\n  var x = start.x;\n  var y = start.y;\n  var current = start;\n  console.log(current.el);\n\n  if (x > 0) {\n    var left = arr[x - 1][y];\n    checkDis(left, current);\n  }\n\n  if (x < arr.length) {\n    var right = arr[x + 1][y];\n    checkDis(right, current);\n  }\n\n  if (y < arr[1].length) {\n    var up = arr[xit][y + 1];\n    checkDis(up, current);\n  }\n\n  if (y > 0) {\n    var down = arr[x][y - 1];\n    checkDis(down, current);\n  } //for (var i = size; i > 0; i--) {\n  // if (arr[current[0]][current[1]][0] == -2) {\n  //     return;\n  // }\n  // if (currentDis != 0) {\n  //     currentDis = arr[current[0]][current[1]][0];\n  // }\n  // if (current[0] < 0 || current[0] > arr.length || current[1] < 0 || current[1] > arr[1].length) {\n  //     return;\n  // }\n  // arr[current[0]][current[1]][0] = -5;\n  // if (arr[current[0]+1][current[1]][0] != -5) {\n  //     arr[start[0]+1][start[1]][1].style.backgroundColor = 'blue';\n  //     newDis = currentDis + 1;\n  //     if (newDis < arr[current[0]+1][current[1]][0]) {\n  //         arr[current[0]+1][current[1]][0] = newDis;\n  //         // SET PARENT????\n  //         current = arr[current[0]+1][current[1]][0];\n  //     }\n  // }\n  // if (arr[current[0]-1][current[1]][0] != -5) {\n  //     arr[start[0]-1][start[1]][1].style.backgroundColor = 'blue';\n  //     newDis = currentDis + 1;\n  //     if (newDis < arr[current[0]-1][current[1]][0]) {\n  //         arr[current[0]-1][current[1]][0] = newDis;\n  //         // SET PARENT????\n  //     }\n  // }\n  // val = arr[current[0]][current[1]+1];\n  // if (val[0] != -5) {\n  //     val[1].style.backgroundColor = 'orange';\n  //     newDis = currentDis + 1;\n  //     console.log(newDis);\n  //     if (newDis < val[0]) {\n  //         val[0] = newDis;\n  //         // SET PARENT????\n  //         current = [current[0], current[1]+1];\n  //     }\n  // }\n  // if (arr[current[0]][current[1]-1][0] != -5) {\n  //     arr[start[0]][start[1]-1][1].style.backgroundColor = 'blue';\n  //     newDis = currentDis + 1;\n  //     if (newDis < arr[current[0]][current[1]-1][0]) {\n  //         arr[current[0]][current[1]-1][0] = newDis;\n  //         // SET PARENT????\n  //     }\n  // }\n  //}\n\n}","map":{"version":3,"names":["Node","x","y","char","dis","parent","el","car","color","style","backgroundColor","dijkstraAlgorithm","arr","start","end","rows","document","getElementsByClassName","i","length","box","arr2","j","node","Number","MAX_SAFE_INTEGER","push","dijkstras","checkDis","neighbour","current","console","log","left","right","up","xit","down"],"sources":["/Users/Matt/Visualizer/app/src/Algorithms/PathFinding/dijkstra.js"],"sourcesContent":["export class Node {\n    constructor(x, y, char, dis, parent, el) {\n        this.dis = dis;\n        this.car = char;\n        this.x = x;\n        this.y = y;\n        this.parent = parent;\n        this.el = el;\n    }\n\n    get coords() {\n        return [this.x, this.y];\n    }\n\n    get color() {\n        return this.el.style.backgroundColor;\n    }\n\n    style(color) {\n        this.el.style.backgroundColor = color;\n    }\n}\n\n// Construct array\nexport default function dijkstraAlgorithm() {\n    var arr = [[Node]];\n    var start, end;\n    var rows = document.getElementsByClassName(\"hr\");\n    for (var i = 0; i < rows.length; i++) {\n        var box = rows[i].getElementsByClassName(\"box\");\n        var arr2 = [];\n        for (var j = 0; j < box.length; j++) {\n            var node = new Node(i+1, j, '0', Number.MAX_SAFE_INTEGER, null, box[j]);\n            if (node.color == 'green') {\n                node.char = 'S';\n                start = [i+1, j];\n            } else if (node.color == 'black') {\n                node.char = 'E';\n                end = [i+1, j];\n            } else if (node.color == 'blue') {\n                node.char = 'X'\n                node.dis = -3;\n            } \n            arr2.push(node);\n        }\n        arr.push(arr2);\n    }\n    dijkstras(arr, start, end);\n}\n\nfunction checkDis(neighbour, current) {\n    if (current.dis + 1 < neighbour.dis) {\n        neighbour.dis = current.dis + 1;\n    }\n}\n\nfunction dijkstras(arr, start, end) {\n    // var size = arr.length * arr[1].length;\n    // var current = start;\n    // var currentDis = 0;\n    // var newDis = 0;\n    // var val = [];\n    var x = start.x;\n    var y = start.y;\n    var current = start;\n    console.log(current.el);\n\n    if (x > 0) {\n        var left = arr[x-1][y];\n        checkDis(left, current);\n    }\n    if (x < arr.length) {\n        var right = arr[x+1][y];\n        checkDis(right, current);\n    }\n    if (y < arr[1].length) {\n        var up = arr[xit][y+1];\n        checkDis(up, current);\n    }\n    if (y > 0) {\n        var down = arr[x][y-1];\n        checkDis(down, current);\n    }\n\n    //for (var i = size; i > 0; i--) {\n\n\n\n        // if (arr[current[0]][current[1]][0] == -2) {\n        //     return;\n        // }\n        // if (currentDis != 0) {\n        //     currentDis = arr[current[0]][current[1]][0];\n        // }\n\n        // if (current[0] < 0 || current[0] > arr.length || current[1] < 0 || current[1] > arr[1].length) {\n        //     return;\n        // }\n\n        // arr[current[0]][current[1]][0] = -5;\n\n        // if (arr[current[0]+1][current[1]][0] != -5) {\n        //     arr[start[0]+1][start[1]][1].style.backgroundColor = 'blue';\n        //     newDis = currentDis + 1;\n        //     if (newDis < arr[current[0]+1][current[1]][0]) {\n        //         arr[current[0]+1][current[1]][0] = newDis;\n        //         // SET PARENT????\n        //         current = arr[current[0]+1][current[1]][0];\n        //     }\n        // }\n        // if (arr[current[0]-1][current[1]][0] != -5) {\n        //     arr[start[0]-1][start[1]][1].style.backgroundColor = 'blue';\n        //     newDis = currentDis + 1;\n        //     if (newDis < arr[current[0]-1][current[1]][0]) {\n        //         arr[current[0]-1][current[1]][0] = newDis;\n        //         // SET PARENT????\n        //     }\n        // }\n        // val = arr[current[0]][current[1]+1];\n        // if (val[0] != -5) {\n        //     val[1].style.backgroundColor = 'orange';\n        //     newDis = currentDis + 1;\n        //     console.log(newDis);\n        //     if (newDis < val[0]) {\n        //         val[0] = newDis;\n        //         // SET PARENT????\n        //         current = [current[0], current[1]+1];\n        //     }\n        // }\n        // if (arr[current[0]][current[1]-1][0] != -5) {\n        //     arr[start[0]][start[1]-1][1].style.backgroundColor = 'blue';\n        //     newDis = currentDis + 1;\n        //     if (newDis < arr[current[0]][current[1]-1][0]) {\n        //         arr[current[0]][current[1]-1][0] = newDis;\n        //         // SET PARENT????\n        //     }\n        // }\n    //}\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}